#!/bin/sh

# Функція для встановлення gitleaks
install_gitleaks() {
    # Визначення операційної системи
    OS=$(uname -s | tr '[:upper:]' '[:lower:]')

    # Визначення архітектури
    ARCH=$(uname -m)

    # Перевірка, чи вже встановлено gitleaks
    if ! command -v gitleaks &> /dev/null; then
        echo "Installing gitleaks..."

        # Отримати останню версію релізу gitleaks
        latest_version=$(curl -sSL https://api.github.com/repos/zricethezav/gitleaks/releases/latest | grep -o '"tag_name": ".*"' | sed 's/"tag_name": "//' | sed 's/"//')

        # Сконструювати посилання для завантаження
        download_link="https://github.com/zricethezav/gitleaks/releases/download/$latest_version/gitleaks_$latest_version_${OS}_${ARCH}.tar.gz"

        # Завантажити gitleaks з обраного посилання
        curl -sSfL "$download_link" -o gitleaks.tar.gz 

        # Розпакувати архів
        tar -xf gitleaks.tar.gz
        chmod +x gitleaks
        mv gitleaks /usr/local/bin/gitleaks
    fi
}

# Встановлення gitleaks
install_gitleaks

# Перевірка, чи увімкнена перевірка gitleaks через git config
gitleaks_check_enabled=$(git config --get hooks.gitleakscheck)

if [ "$gitleaks_check_enabled" != "true" ]; then
    echo "gitleaks check is disabled via git config. Skipping gitleaks check."
    exit 0
fi

# Виконання gitleaks для перевірки наявності секретів
echo "Running gitleaks..."
gitleaks --path=. --verbose

# Якщо gitleaks знайшов секретні дані, відхиляємо коміт
if [ $? -ne 0 ]; then
    echo "Commit rejected: gitleaks found sensitive data."
    exit 1
fi

echo "No sensitive data found. Commit allowed."
exit 0
